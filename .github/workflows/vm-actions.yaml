name: Provisioning Virtual Machine 
# on: [push]
# should only run when a commit is pushed to the main branch or on any pull requests.
on:
  push:
    branches:
      - main
  pull_request:
jobs:
  checkout-init-validate:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./VirtualMachine
    steps:
      - name: Checkout
        uses: actions/checkout@v3]

      - uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        # with:
          # terraform_version: 0.13.0
          # cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      # It enforces Terraform best practices by preventing your team from merging misformatted configuration to main.
      - name: Terraform Format
        id: fmt
        run: terraform fmt -check

      - name: Terraform Init
        id: init
        run: terraform init

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color
  plan:
    needs: checkout-init-validate
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./VirtualMachine
    steps:
      - name: Terraform Plan
        id: plan
        if: github.event_name == 'pull_request'
        run: terraform plan -no-color -input=false
        continue-on-error: true
      - name: Show terraform plan with format
        uses: actions/github-script@6
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`

            </details>

            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })
      # returns whether a plan was successfully generated or not. 
      # This step highlights whenever a plan fails because the "Terraform Plan" step continues on error.
      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

  apply:
    needs: plan
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./VirtualMachine
    steps:
      - name: Terraform Apply
        # only run when a commit is pushed to main.
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: terraform apply -auto-approve -input=false